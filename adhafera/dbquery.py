from django.db import connections
from django.db.backends.utils import CursorWrapper
from .models import List, ListUser


# -------------------------------------------------- LISTS

def check_list_exists(list_id:int):
    return List.objects.filter(id=list_id).exists()

def count_list_users(list_id:int):
    return ListUser.objects.filter(list_id=list_id).count()


# -------------------------------------------------- USER LISTS

def check_user_has_access_to_list(user_id:int, list_id:int):
    return ListUser.objects.filter(user_id=user_id).filter(list_id=list_id).exists()


def get_user_list_count(user_id:int):
    with connections['default'].cursor() as cursor:
        return get_user_lists_sequence_min_max_and_count(cursor, user_id)[2]


def get_user_lists_sequence_min_max_and_count(cursor:CursorWrapper, user_id:int):
    cursor.execute(
        "SELECT MIN(list_position), MAX(list_position), COUNT(list_position)" +
        " FROM leo.adhafera_listuser WHERE user_id = %s",
        [user_id])
    row = cursor.fetchone()
    if row is None:
        raise Exception('no SQL result')
    if row[2] == 0:
        return None, None, 0
    #      min          max          count
    return int(row[0]), int(row[1]), int(row[2])


# -------------------------------------------------- LIST ITEMS

def get_list_item_count(list_id:int):
    with connections['default'].cursor() as cursor:
        return get_list_items_sequence_min_max_and_count(cursor, list_id)[2]


def get_list_items_sequence_min_max_and_count(cursor:CursorWrapper, list_id:int):
    cursor.execute(
        "SELECT MIN(sequence_position), MAX(sequence_position), COUNT(sequence_position)" +
        " FROM leo.adhafera_item WHERE list_id = %s",
        [list_id])
    row = cursor.fetchone()
    if row is None:
        raise Exception('no SQL result')
    if row[2] == 0:
        return None, None, 0
    #      min          max          count
    return int(row[0]), int(row[1]), int(row[2])


# -------------------------------------------------- UNUSED

# # greatest_user_list_position should always return the same value as get_user_list_count above
# # so let's not use this one (keeping to document this use of the ORM)
# def greatest_user_list_position(user_id:int):
#     greatestPreviousListDict = List.objects.values(
#         'listusers__list_position').filter(listusers__user_id=user_id).latest('listusers__list_position')
#     # note: the query generated by the above seems to have a superfluous extra outter join but the results are as desired
#     greatestPreviousListPosition = greatestPreviousListDict.get('listusers__list_position')
#     if greatestPreviousListPosition is None:
#         return 0
#     elif isinstance(greatestPreviousListPosition, int) is False:
#         return 'Failed to enumerate user\'s lists'
#     else:
#         return int(greatestPreviousListPosition)
